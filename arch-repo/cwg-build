#!/usr/bin/bash

set -e

MYREPO='cwg'

if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        BLUE="${BOLD}$(tput setaf 4)"
        GREEN="${BOLD}$(tput setaf 2)"
        RED="${BOLD}$(tput setaf 1)"
        YELLOW="${BOLD}$(tput setaf 3)"
else
        ALL_OFF="\e[1;0m"
        BOLD="\e[1;1m"
        BLUE="${BOLD}\e[1;34m"
        GREEN="${BOLD}\e[1;32m"
        RED="${BOLD}\e[1;31m"
        YELLOW="${BOLD}\e[1;33m"
fi

plain() {
        local mesg=${1}; shift
        printf "${BOLD}    ${mesg}${ALL_OFF}\n" "${@}" >&2
}

msg() {
        local mesg=${1}; shift
        printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "${@}" >&2
}

msg2() {
        local mesg=${1}; shift
        printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "${@}" >&2
}

warning() {
	local mesg=${1}; shift
	printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "${@}" >&2
}

error() {
	local mesg=${1}; shift
	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "${@}" >&2
}

prompt() {
        local mesg=${1}; shift
        printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" >&2
}

USAGE(){
	# echo -e "Usage:\t$(basename ${0}) [target]"
	plain "Usage:\t$(basename ${0}) [targets]..."
	exit 1
}

SNATCH_PACKAGE(){
	TARGET=${1}
	# hit the AUR API to find the pkgbase
	BASE=$(python -c "import requests; print(requests.get('https://aur.archlinux.org/rpc.php', params={'type': 'info', 'arg': '${TARGET}'}).json().get('results').get('PackageBase'))")
	if [[ ${TARGET} == ${BASE} ]]; then
		msg "downloading ${TARGET}"
	else
		msg "pkgbase of ${TARGET} is ${BASE}, downloading ${BASE}"
	fi
	cower --target=${BUILD_DIR} --ignorerepo=${MYREPO} -fd ${TARGET}
	cd ${BUILD_DIR}/${BASE}
	while :; do
		prompt "edit PKGBUILD? [Y/n] "
		read confirm
		case "${confirm}" in
			"y"|"Y"|"yes"|"YES"|"Yes"|"") ${EDITOR} PKGBUILD; break ;;
			"n"|"N"|"no"|"NO"|"No") break;;
			*) echo "Please enter 'y' or 'n'."
		esac
	done
	if [[ -f ./${TARGET}.install ]]; then 
		for INSTALL in *.install; do
			while :; do
				prompt "edit ${INSTALL}? [Y/n] "
				read confirm
				case "${confirm}" in
					"y"|"Y"|"yes"|"YES"|"Yes"|"") ${EDITOR} ${INSTALL}; break ;;
					"n"|"N"|"no"|"NO"|"No") break;;
					*) echo "Please enter 'y' or 'n'."
				esac
			done
		done
	fi
	for PATCH in ./*.patch; do
		if [[ -f ./*.patch ]]; then 
			while :; do
				prompt "edit ${PATCH}? [Y/n] "
				read confirm
				case "${confirm}" in
					"y"|"Y"|"yes"|"YES"|"Yes"|"") ${EDITOR} ${PATCH}; break ;;
					"n"|"N"|"no"|"NO"|"No") break;;
					*) echo "Please enter 'y' or 'n'."
				esac
			done
		fi
	done
	msg2 "building ${TARGET}"
	sudo ${BUILD}
	PACKAGES=(*.pkg.tar.xz)
	if [[ ${PACKAGES[0]} == '*.pkg.tar.xz' ]]; then
	#if [[ ${#PACKAGES[@]} == 0 ]]; then
		error "no packages found after build"
		exit 1
	fi
	for PACKAGE in ${PACKAGES[@]}; do
		msg2 "moving ${PACKAGE} to ${REPO_DIR}"
		sudo cp ${PACKAGE} ${REPO_DIR}
	done
	cd ${ORIG_DIR}
	msg2 "deleting build directory"
	rm -rf ${BUILD_DIR}/${TARGET}
}

# set variables
ORIG_DIR=$(pwd)
CHROOT="/var/lib/build"
CLEAN="-c"
#INSTALL="-- -i"
BUILD="/usr/bin/makechrootpkg ${CLEAN} -r ${CHROOT} ${INSTALL}"
REPO_DIR=/srv/http/arch.cgtx.us/x86_64

# if there are zero args, print usage
if [[ ${#} -eq 0 ]]; then
	USAGE
fi

# setup the build directory
CACHE_HOME=${XDG_CACHE_HOME:-${HOME}/.cache}
BUILD_DIR="${CACHE_HOME}/cower"
[[ -d ${BUILD_DIR} ]] || mkdir -p ${BUILD_DIR}

# build all packages on the command line
while :; do
	msg "beginning process for ${1}"
	SNATCH_PACKAGE ${1}
	shift
	if [[ ${#} -eq 0 ]]; then
		break
	fi
done
