#!/usr/bin/bash

#set -e

MYREPO='cwg'

IGNORE=(
	clucker
	cwg-meta-apps-cli
	cwg-meta-apps-x11
	cwg-meta-openbox
	cwg-meta-pulseaudio
	cwg-meta-python
	cwg-meta-rackspace
	hammertime
	pidgin-minimal
)

if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        BLUE="${BOLD}$(tput setaf 4)"
        GREEN="${BOLD}$(tput setaf 2)"
        RED="${BOLD}$(tput setaf 1)"
        YELLOW="${BOLD}$(tput setaf 3)"
else
        ALL_OFF="\e[1;0m"
        BOLD="\e[1;1m"
        BLUE="${BOLD}\e[1;34m"
        GREEN="${BOLD}\e[1;32m"
        RED="${BOLD}\e[1;31m"
        YELLOW="${BOLD}\e[1;33m"
fi

plain() {
        local mesg=${1}; shift
        printf "${BOLD}    ${mesg}${ALL_OFF}\n" "${@}" >&2
}

msg() {
        local mesg=${1}; shift
        printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "${@}" >&2
}

msg2() {
        local mesg=${1}; shift
        printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "${@}" >&2
}

prompt() {
        local mesg=${1}; shift
        printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" >&2
}

warning() {
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

skip_check() {
	local PKG=${1}
	for i in ${IGNORE[@]}; do
		if [[ ${PKG} == ${i} ]]; then
			return 0
		fi
	done
	if [[ ${PKG} == *-git ]]; then
		return 0
	fi
	return 1
}

query_version() {
	local REPO=${1}
	local PKG=${2}
	if [[ ${REPO} == 'aur' ]]; then
		cower --ignorerepo=${MYREPO} --info --format '%v' ${PKG} 2>/dev/null
	else
		pacman --sync --print --print-format '%v' --nodeps --nodeps ${REPO}/${PKG}
	fi
}

check() {
	local PKG=${1}
	if skip_check ${PKG}; then
		# if package is in skip list, abort cleanly
		return 0
	fi
	# obtain the versions
	REPO_VERSION=$(query_version ${MYREPO} ${PKG})
	AUR_VERSION=$(query_version aur ${PKG})
	# sanity checks
	if [[ -z ${AUR_VERSION} ]]; then
		warning "${PKG} not found in the AUR"
	elif [[ -z ${REPO_VERSION} ]]; then
		warning "${PKG} not found in the repo"
	else
		# does it match?
		if [[ ${REPO_VERSION} == ${AUR_VERSION} ]]; then
			msg "MATCH ${PKG}"
		else
			REPO_DESC="${MYREPO} version (${REPO_VERSION})"
			AUR_DESC="AUR version (${AUR_VERSION})"
			if [[ $(echo -e "${REPO_VERSION}\n${AUR_VERSION}" | sort -V | tail -1) == ${AUR_VERSION} ]]; then
				error "UPDATE ${PKG} - ${AUR_DESC} newer than ${REPO_DESC}"
			elif [[ $(echo -e "${REPO_VERSION}\n${AUR_VERSION}" | sort -V | tail -1) == ${REPO_VERSION} ]]; then
				warning "NEWER ${PKG} - ${REPO_DESC} newer than ${AUR_DESC}"
			else
				error "unknown version conflict for ${PKG}"
			fi
		fi
	fi
}

repo_list() {
	local REPO=${1}
	pacman --sync --quiet --list ${REPO}
}

main() {
	msg "refreshing package cache"
	sudo pacman --sync --refresh
	if [[ ${#} -eq 0 ]]; then
		# no arguments, check everything
		local PKG
		local PKG_LIST=($(repo_list ${MYREPO}))
		for PKG in ${PKG_LIST[@]}; do
			check ${PKG}
		done
	else
		# check each argument
		local ARG
		for ARG in ${@}; do
			check ${ARG}
		done
	fi
}

main ${@}
